module = _{ (uniform | input | output | fun)* ~ eoi }

typ = { ident_type | array_type }
ident_type = { ident }
array_type = { "[" ~ typ ~ ";" ~ usize ~ "]" }

uniform = { "uniform" ~ (uniform_array | uniform_single) ~ ";" }
uniform_single = { ident }
uniform_array = { ident ~ "[" ~ usize ~ "]" }

input = { "in" ~ ident ~ ";" }

output = { "out" ~ ident ~ ":" ~ ident ~ ";" }

fun_arg = { ident ~ ":" ~ typ }
fun_args = { (fun_arg ~ ",")* ~ fun_arg? }
fun = { "fn" ~ ident ~ "(" ~ fun_args ~ ")" ~ block }

block = { "{" ~ (stmt ~ ";")* ~ stmt? ~ "}" }

stmt = { stmt_let | stmt_ret | expr }
stmt_let = { "let" ~ ident ~ (":" ~ typ)? ~ "=" ~ expr }
stmt_ret = { "return" ~ expr? }

expr = { operand ~ (op ~ operand)* }
operand = { expr_arr | expr_float | expr_var | "(" ~ expr ~ ")" }
op = _{ op_add | op_mul }
op_add = { "+" }
op_mul = { "*" }
expr_var = { ident ~ ("." ~ mask)? }
expr_float = { float }
expr_arr = { "[" ~ (expr ~ ",")* ~ expr? ~ "]" }

mask = @{ ("x" | "y" | "z" | "w" | "r" | "g" | "b" | "a"){1,4} }

float = @{
    digit+ ~ "." ~ digit+
  | digit+ ~ "."
  | "." ~ digit+
}

usize = { digit+ }

alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
ident = @{ !digit ~ (alpha | digit | "_")+ }

whitespace = _{ " " | "\n" | "\t" }
block_comment = _{ "/*" ~ (!"*/" ~ any)* ~ "*/" }
line_comment = _{ "//" ~ (!"\n" ~ any)* ~ ("\n"|eoi) }
comment = _{ line_comment | block_comment }
